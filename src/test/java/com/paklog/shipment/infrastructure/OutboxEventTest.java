package com.paklog.shipment.infrastructure;

import com.paklog.shipment.domain.DomainEvent;
import org.junit.jupiter.api.Test;

import java.time.Instant;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class OutboxEventTest {

    @Test
    void testConstructorFromDomainEvent() {
        // Arrange
        DomainEvent mockDomainEvent = mock(DomainEvent.class);
        when(mockDomainEvent.getAggregateId()).thenReturn("agg-1");
        when(mockDomainEvent.getAggregateType()).thenReturn("type-1");
        when(mockDomainEvent.getEventType()).thenReturn("event-1");
        when(mockDomainEvent.getDestination()).thenReturn("topic-1");
        when(mockDomainEvent.getPayload()).thenReturn("{}");

        // Act
        OutboxEvent outboxEvent = new OutboxEvent(mockDomainEvent);

        // Assert
        // ID is generated by MongoDB, so it will be null in unit tests
        assertEquals("agg-1", outboxEvent.getAggregateId());
        assertEquals("type-1", outboxEvent.getAggregateType());
        assertEquals("event-1", outboxEvent.getEventType());
        assertEquals("topic-1", outboxEvent.getDestination());
        assertEquals("{}", outboxEvent.getPayload());
        assertNotNull(outboxEvent.getCreatedAt());
        assertEquals(OutboxEvent.EventStatus.PENDING, outboxEvent.getStatus());
        assertNull(outboxEvent.getErrorMessage());
    }

    @Test
    void testConstructorWithAllArguments() {
        // Arrange
        String aggregateId = "agg-2";
        String aggregateType = "type-2";
        String eventType = "event-2";
        String destination = "topic-2";
        String payload = "{\"key\":\"value\"}";

        // Act
        OutboxEvent outboxEvent = new OutboxEvent(aggregateId, aggregateType, eventType, destination, payload);

        // Assert
        // ID is generated by MongoDB, so it will be null in unit tests
        assertEquals(aggregateId, outboxEvent.getAggregateId());
        assertEquals(aggregateType, outboxEvent.getAggregateType());
        assertEquals(eventType, outboxEvent.getEventType());
        assertEquals(destination, outboxEvent.getDestination());
        assertEquals(payload, outboxEvent.getPayload());
        assertNotNull(outboxEvent.getCreatedAt());
        assertEquals(OutboxEvent.EventStatus.PENDING, outboxEvent.getStatus());
        assertNull(outboxEvent.getErrorMessage());
    }

    @Test
    void testSettersAndGetters() {
        // Arrange
        OutboxEvent outboxEvent = new OutboxEvent("agg-3", "type-3", "event-3", "topic-3", "{}");

        // Act
        outboxEvent.setId("new-id");
        outboxEvent.setAggregateId("new-agg-id");
        outboxEvent.setAggregateType("new-agg-type");
        outboxEvent.setEventType("new-event-type");
        outboxEvent.setPayload("new-payload");
        outboxEvent.setDestination("new-topic");
        outboxEvent.setCreatedAt(Instant.EPOCH);
        outboxEvent.setStatus(OutboxEvent.EventStatus.PROCESSED);
        outboxEvent.setErrorMessage("new-error");
        outboxEvent.setLastAttemptAt(Instant.EPOCH.plusSeconds(60));
        outboxEvent.incrementAttemptCount();

        // Assert
        assertEquals("new-id", outboxEvent.getId());
        assertEquals("new-agg-id", outboxEvent.getAggregateId());
        assertEquals("new-agg-type", outboxEvent.getAggregateType());
        assertEquals("new-event-type", outboxEvent.getEventType());
        assertEquals("new-payload", outboxEvent.getPayload());
        assertEquals("new-topic", outboxEvent.getDestination());
        assertEquals(Instant.EPOCH, outboxEvent.getCreatedAt());
        assertEquals(OutboxEvent.EventStatus.PROCESSED, outboxEvent.getStatus());
        assertEquals("new-error", outboxEvent.getErrorMessage());
        assertEquals(Instant.EPOCH.plusSeconds(60), outboxEvent.getLastAttemptAt());
        assertEquals(1, outboxEvent.getAttemptCount());
    }

    @Test
    void testIsProcessed() {
        // Arrange
        OutboxEvent outboxEvent = new OutboxEvent("agg-4", "type-4", "event-4", "topic-4", "{}");

        // Act & Assert
        outboxEvent.setStatus(OutboxEvent.EventStatus.PENDING);
        assertFalse(outboxEvent.isProcessed());

        outboxEvent.setStatus(OutboxEvent.EventStatus.PROCESSED);
        assertTrue(outboxEvent.isProcessed());

        outboxEvent.setStatus(OutboxEvent.EventStatus.FAILED);
        assertFalse(outboxEvent.isProcessed());
    }

    @Test
    void markFailedSetsStatusAndError() {
        OutboxEvent outboxEvent = new OutboxEvent("agg-5", "Shipment", "event", "topic", "{}");

        outboxEvent.markFailed("boom");

        assertEquals(OutboxEvent.EventStatus.FAILED, outboxEvent.getStatus());
        assertEquals("boom", outboxEvent.getErrorMessage());
        assertNotNull(outboxEvent.getLastAttemptAt());
    }
}
